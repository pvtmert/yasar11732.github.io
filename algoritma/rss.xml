<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Python, Yazılım, ve Programlama (Algoritma)</title><link>http://ysar.net/</link><description></description><atom:link href="http://ysar.net/algoritma/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>tr</language><lastBuildDate>Sun, 26 Aug 2018 11:34:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Evrimsel Algoritmalar</title><link>http://ysar.net/algoritma/evrimsel-algoritmalar.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Ne zamandır, evrimsel algoritmalar ve genetik algoritmalarına göz atmak istiyordum.. Bugün biraz fırsat bulup, evrimsel algoritmalara
göz attım.&lt;/p&gt;
&lt;p&gt;Evrimsel algoritma, bana biraz breadth-first search algoritmalarını andırdı. Genel gidişat şu şekilde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rastgele bireylerden ilk popülasyonu oluştur&lt;/li&gt;
&lt;li&gt;Her bireyin, aranan sonuca benzerliğini test et&lt;/li&gt;
&lt;li&gt;En iyi bireylerden, mutasyon ve eşleşme ile yeni bireyler oluştur.&lt;/li&gt;
&lt;li&gt;En iyi bireylerden yeni popülasyon oluştur.&lt;/li&gt;
&lt;li&gt;Yeterince iyi bireyler elde edene kadar tekrarla&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bu tür algoritmaları genelde arama uzayının çok büyük olduğu durumlarda kullanıyorlar. Daha önce gördüğüm algoritmalara
nazaran, doğru sonuca bir hayli hızlı yaklaşıyor, ancak, bazı sıkıntılar da yaşadım, bunlardan birazdan bahsedeceğim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/evrimsel-algoritmalar.html"&gt;Devamını oku…&lt;/a&gt; (7 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/evrimsel-algoritmalar.html</guid><pubDate>Sun, 03 Nov 2013 23:59:00 GMT</pubDate></item><item><title>Exact Cover, Dancing Links ve Sudoku Çözme</title><link>http://ysar.net/algoritma/exact-cover-dancing-links-ve-sudoku-cozme.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Donald Knuth tarafından geliştirilmiş olan "Dancing Links" algoritması, "exact cover" problemi
ve bu probleme çevirilebilen sudoku gibi problemlerin çözümü için bir hayli etkin bir yöntem sunuyor.
Bu yazıda, "exact cover" problemi, "dancing links" algoritması, sudoku probleminin exact cover
problemine dönüştürülmesi konularından bahsedeceğim. Ayrıca, Ali Assaf tarafından "Algorithm X in 30 lines!"
yazısında bahsedilen yönteme kısaca değineceğim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/exact-cover-dancing-links-ve-sudoku-cozme.html"&gt;Devamını oku…&lt;/a&gt; (6 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/exact-cover-dancing-links-ve-sudoku-cozme.html</guid><pubDate>Sun, 03 Nov 2013 04:32:00 GMT</pubDate></item><item><title>Pixel Sıralama Videoları</title><link>http://ysar.net/algoritma/pixel-siralama-videolari.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Geçen gün &lt;a href="http://miratcan.tumblr.com/post/25087436669/python-ile-tersine-erime-efekti"&gt;Python ile tersine erime efekti&lt;/a&gt;
yazısını gördüm. Yaptığı şey çok hoşuma gitti, ben de özendim, o tarz birşey yapayım dedim. Tam olarak ne yapsam diye
düşünürken, aklıma sorting algoritmaları geldi. Sort algoritmalarını bir resim üzerinde uygulasam ve ara adımlardan
bir video oluştursam ilginç olabilir diye düşündüm, ve çeşitli sıralama algoritmaları ile birkaç video hazırladım.
Buyurun bakalım, umarım beğenirsiniz: &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/pixel-siralama-videolari.html"&gt;Devamını oku…&lt;/a&gt; (3 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/pixel-siralama-videolari.html</guid><pubDate>Mon, 28 Oct 2013 10:37:17 GMT</pubDate></item><item><title>4 renk teoremi ve harita boyama</title><link>http://ysar.net/algoritma/4-renk-teoremi-ve-harita-boyama.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;4 renk teoremi, verilen bir yüzeysel haritayı, komşu bölgeler farklı renklerde olacak şekilde
boyamak için 4 rengin yeterli olacağını savunuyor. Komşuluk, köşe olmayan ortak bir
sınıra sahip olmak olarak tanımlanmış. Bu teoremin geçerli olması için, bölgelerin
bir bütün halinde olması gerekiyor. Dünya haritası bu kurala uymuyor, çünkü, Alaska'nın
Amerikayla kara bağlantısı yok. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/4-renk-teoremi-ve-harita-boyama.html"&gt;Devamını oku…&lt;/a&gt; (5 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/4-renk-teoremi-ve-harita-boyama.html</guid><pubDate>Wed, 23 Oct 2013 13:00:00 GMT</pubDate></item><item><title>Python narsist sayılar</title><link>http://ysar.net/algoritma/python-narsist-sayilar.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;n haneli bir sayının basamaklarının n'inci üstlerinin toplamı, sayının
kendisine eşitse, böyle sayılara narsist sayılar (armstrong sayıları da
olur...) deniyor. Örneğin, 153, 3 haneli &lt;code&gt;1^3 + 5^3 + 3^3 = 153&lt;/code&gt;,
olduğu için, 153 sayısı bir armstrong sayısı oluyor. Bununla ilgili bir
forum konusu &lt;a href="http://www.istihza.com/forum/viewtopic.php?f=40&amp;amp;t=270"&gt;şurada&lt;/a&gt; vardı. Ben de en basitinden şöyle birşey yazdım; &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/python-narsist-sayilar.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/python-narsist-sayilar.html</guid><pubDate>Tue, 18 Dec 2012 16:31:18 GMT</pubDate></item><item><title>Matlab'da Sieve of Erastosthenes algoritması</title><link>http://ysar.net/algoritma/matlab-sieve-of-erastosthenes.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Matlab ile sieve algoritması kullanarak asal sayıları bulan bir
fonksiyon yazdım. İlgilenenler aşağıda bulabilir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;P &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c"&gt;%sieve Find prime numbers up to max using&lt;/span&gt;
&lt;span class="c"&gt;%   sieve of Eratosthenes&lt;/span&gt;
&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/matlab-sieve-of-erastosthenes.html</guid><pubDate>Mon, 26 Nov 2012 14:54:48 GMT</pubDate></item><item><title>İki bilinmeyenli denklem çözümleri</title><link>http://ysar.net/algoritma/iki-bilinmeyenli-denklem-cozumleri.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Dün Python ile, iki bilinmeyenli denklem çözümleriyle ile birşeyler
yazdım. Paylaşayım dedim. Sonuncusunun biraz daha elden geçmesi lazım,
ama aşağı yukarı çalışıyor. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/iki-bilinmeyenli-denklem-cozumleri.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/iki-bilinmeyenli-denklem-cozumleri.html</guid><pubDate>Fri, 20 Jan 2012 23:17:00 GMT</pubDate></item><item><title>Kimya formülü ayrıştırıcısı</title><link>http://ysar.net/algoritma/kimya-formula-parser.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://www.istihza.com/forum/viewtopic.php?f=25&amp;amp;t=538"&gt;Şurada&lt;/a&gt; yazmıştım, buraya da kopyalayayım dedim. Yoksa yaptığım
şeylerin takibini yapmak zor oluyor. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/kimya-formula-parser.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/kimya-formula-parser.html</guid><pubDate>Fri, 30 Dec 2011 08:52:00 GMT</pubDate></item><item><title>Benzer Yazı Analizi 2</title><link>http://ysar.net/algoritma/benzer-yazi-analizi-2.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/benzer-yazi-analizi.html"&gt;Benzer Yazı Analizi 1&lt;/a&gt; başlıklı yazıyı okuduysanız, iki yazı
arasındaki benzerlikleri hesaplamaya çalışan bir algoritma yazmaya
çalışıyordum ancak çok da başarılı olamamıştım. Bu yazıda, algoritmayı
biraz geliştirdim ve aldığım sonuçlar tatmin edici oldu.&lt;/p&gt;
&lt;p&gt;Bu yeni algoritmanın en önemli farkı, her kelimeye kendine göre katsayı
ataması. Önceki yazıda bahsettiğim, &lt;a href="http://bioinformatics.oxfordjournals.org/content/22/18/2298.long"&gt;Text
similarity: an alternative way to search MEDLINE&lt;/a&gt; yazısını takip
etmeye devam ettim, ve oradaki algoritmayı aynen uygulamaya çalıştım.
Kodlar aşağıda: &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/benzer-yazi-analizi-2.html"&gt;Devamını oku…&lt;/a&gt; (3 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/benzer-yazi-analizi-2.html</guid><pubDate>Fri, 19 Aug 2011 16:44:00 GMT</pubDate></item><item><title>Benzer yazı analizi 1</title><link>http://ysar.net/algoritma/benzer-yazi-analizi.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Benzer yazıları bulup, ziyaretçiye öneri göstermek zannettiğimden çok
daha zor gibi görünüyor. Bir yandan düzgün bir algoritma oluşturmaya
çalışırken, bir yandan da şu anda katettiğim yolu (her ne kadar çok
olmasa da) aktarayım istedim.&lt;/p&gt;
&lt;p&gt;Yazıların benzerliklerini hesaplamak için, &lt;a href="http://bioinformatics.oxfordjournals.org/content/22/18/2298.long"&gt;Text similarity: an
alternative way to search MEDLINE&lt;/a&gt; adlı makalede kosinüs katsayısı
(Cosine Coefficient) formülünü gördüm (daha önce de başka bir yerde
görmüştüm bu formülü, ama çıkartamıyorum şimdi :) ) ve denemeye karar
verdim. Şimdilik, kelime ağırlıklarını formüle eklemeden bir deneme
yaptım. Şu şekilde bir python dosyası ortaya çıktı: &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/benzer-yazi-analizi.html"&gt;Devamını oku…&lt;/a&gt; (2 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/benzer-yazi-analizi.html</guid><pubDate>Fri, 19 Aug 2011 08:13:00 GMT</pubDate></item></channel></rss>