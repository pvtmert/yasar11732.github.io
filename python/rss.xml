<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>YSAR.NET (Python)</title><link>http://ysar.net/</link><description></description><atom:link href="http://ysar.net/python/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>tr</language><lastBuildDate>Sun, 09 Sep 2018 22:20:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Sözlüklerindeki Hash Tablosu Yapısı</title><link>http://ysar.net/python/sozluk-algoritmasi.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Programlama öğrenmek için kullanılabilecek birçok yöntem var. Referans belge okumak, küçük projeler yapmak, soru sormak, soru cevaplamak, blog yazmak ve
belge çevirmek, programlama öğrenirken kullanılabilecek yöntemlerden bazıları. Bunlara ek olarak, profesyonel kişi veya gruplarca yazılmış programların
kaynak kodlarını okumanın çok faydalı olduğunu düşünüyorum. Temel bilgiler öğrenmenin ve başlangıç-orta seviyede programlar yazmanın eğitsel katkısı
giderek azaldığında, kod incelemesi yapmak, öğrenme konusunda yeni bir ivme kazandırabilir. Kişinin yeni fikirlerle veya eski fikirlerin daha rafine
halleriyle karşılaşmasına olanak sağlar. Bu gözle incelenebilecek kodlara örnek olarak, &lt;a href="https://github.com/python/cpython/blob/2.7/Objects/dictobject.c"&gt;Python sözlük objesini&lt;/a&gt; verebiliriz.
Dinamik array ve Hash Table (Tr. Komut Çizelgesi)
özelliklerine sahip bu ilginç veri yapısı, &lt;em&gt;keyword&lt;/em&gt; argümanları, sınıfların metodları, global ve gömülü değişkenler gibi, bir anahtarla veriyi
eşlemek gereken her yerde kullanılıyor. Bu yüzden Python için önemli bir yeri var. &lt;/p&gt;
&lt;p&gt;Büyük bir projenin kaynak kodlarını okumak, çoğu zaman korkutucudur. Neyse ki, &lt;code&gt;dictobject.c&lt;/code&gt; içindeki yorumlar öyle açık ki, tahmine gerek bırakmıyor.
Bu yazının büyük bir kısmı, &lt;code&gt;dictobject.c&lt;/code&gt; içindeki yorumların kendi kelimelerimle ifadesinden ibaret olacak. Burada bahsedilen konuları anlamak için, giriş seviyesinde Python bilgisi,
orta derecede C bilgisi, temel veri yapıları konusunda bilgi sahibi olmanız faydalı olacaktır.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Not&lt;/strong&gt;: Buradaki inceleme Python 2.7'deki &lt;code&gt;dictobject.c&lt;/code&gt; dosyası üzerinden yapıldı, &lt;a href="https://raw.githubusercontent.com/python/cpython/3.7/Objects/dictobject.c"&gt;bu dosyanın 3.7 deki halinde&lt;/a&gt;
ciddi farklılıklar var.&lt;/p&gt;
&lt;p&gt;Python sözlükleri C dilinde hash tablosu olarak tasarlanmış. Tablonun her bir girdisi, aşağıdaki yapıda;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Cached hash code of me_key.  Note that hash codes are C longs.&lt;/span&gt;
&lt;span class="cm"&gt;     * We have to use Py_ssize_t instead because dict_popitem() abuses&lt;/span&gt;
&lt;span class="cm"&gt;     * me_hash to hold a search finger.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;me_hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;me_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;me_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PyDictEntry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;struct&lt;/code&gt; yapısı çok basit. Sözlük anahtarı olarak kullanılan objenin &lt;code&gt;hash&lt;/code&gt; değeri, anahtar ve değer olarak kullanılan objeleri
işaret eden pointerlar var. Tablo içindeki bu girdilerin her birine slot deniyor. Bir slotun, 3 farklı tipi olabiliyor. Kullanılmamış
slotlarda, &lt;code&gt;me_key&lt;/code&gt; ve &lt;code&gt;me_value&lt;/code&gt; değerleri &lt;code&gt;NULL&lt;/code&gt; oluyor. Aktif slotlarda, &lt;code&gt;me_key != NULL &amp;amp;&amp;amp; me_key != dummy&lt;/code&gt; ve &lt;code&gt;me_value != NULL&lt;/code&gt;
oluyor. Dummy diye adlandırdıkları slotlar ise, eskiden geçerli bir (anahtar, değer) barındıran ama şu an boş olan slotlar. Bunlarda
ise, &lt;code&gt;me_key == dummy&lt;/code&gt; ve &lt;code&gt;me_value == NULL&lt;/code&gt; oluyor. &lt;code&gt;dummy&lt;/code&gt; ilk kez sözlük objesi oluşturulduğunda bir defaya mahsus olmak üzere
oluşturulan ve tek amacı bir hash tablosu slotunun boş olduğunu belirtmek olan bir Python objesi. Bunun neden gerekli olduğu, ekleme
ve arama bölümlerinde açıklanacak.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_dictobject&lt;/span&gt; &lt;span class="n"&gt;PyDictObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_dictobject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;ma_fill&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* # Active + # Dummy */&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;ma_used&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* # Active */&lt;/span&gt;

    &lt;span class="cm"&gt;/* The table contains ma_mask + 1 slots, and that's a power of 2.&lt;/span&gt;
&lt;span class="cm"&gt;     * We store the mask instead of the size because the mask is more&lt;/span&gt;
&lt;span class="cm"&gt;     * frequently needed.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;ma_mask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* ma_table points to ma_smalltable for small tables, else to&lt;/span&gt;
&lt;span class="cm"&gt;     * additional malloc'ed memory.  ma_table is never NULL!  This rule&lt;/span&gt;
&lt;span class="cm"&gt;     * saves repeated runtime null-tests in the workhorse getitem and&lt;/span&gt;
&lt;span class="cm"&gt;     * setitem calls.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;PyDictEntry&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ma_table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyDictEntry&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ma_lookup&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;PyDictObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;PyDictEntry&lt;/span&gt; &lt;span class="n"&gt;ma_smalltable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PyDict_MINSIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;ma_fill&lt;/code&gt; değişkeni
toplam aktif ve dummy slotlarının sayısını tutarken, &lt;code&gt;ma_used&lt;/code&gt; değişkeni ise, aktif kayıtların sayısını tutuyor. &lt;code&gt;ma_mask&lt;/code&gt; değişkeni
hash tablosunun kapasitesinin bir eksiğini tutuyor. Bunun neden gerekli olduğunu da ekleme ve arama bölümlerinde açıklanacak, şimdilik
bu haliyle kabul edin. &lt;code&gt;ma_table&lt;/code&gt; değişkeni ise, tablo için ayrılmış alana işaret eden bir pointer. Sözlük objesi ilk oluşturulduğunda,
&lt;code&gt;ma_table = &amp;amp;(ma_smalltable[0])&lt;/code&gt; oluyor. Böylece, küçük tablolar için (5 elemana kadar) ayrıca bir &lt;code&gt;malloc&lt;/code&gt; çağrısı yapmaya gerek kalmıyor.
&lt;code&gt;PyObject_HEAD&lt;/code&gt; makrosu ve &lt;code&gt;ma_lookup&lt;/code&gt; fonksiyonu birebir konumuzla alakalı değil. &lt;/p&gt;
&lt;h3&gt;Arama ve Ekleme&lt;/h3&gt;
&lt;p&gt;Tüm hash tabloları gibi, Python'daki sözlükler de, Python objelerinin hash değerini hesaplayıp, bu değeri aranılan
nesneyi tablo için bulmak için kullanıyor. Ancak, Python sözlüklerinde kullanılan hash tablolarında bazı nüanslar var.
Öncelikle, yaygın kullanılan hash fonksiyonları, hash değerlerini rastgele-gibi dağıtır. Python hash fonksiyonları
bunun aksine gayet düzenlidir. Örneğin;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; map(hash, range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&amp;gt;&amp;gt;&amp;gt; map(hash, ("aaa","aab","aac","aad"))
[-1599925404, -1599925401, -1599925402, -1599925407]
&lt;/pre&gt;


&lt;p&gt;Buradan anlaşılacağı üzere, her bir tam sayının hash değeri kendisine eşittir. Sıralı giden &lt;code&gt;string&lt;/code&gt; objelerinin hash
değerleri ise, birbirine yaklaşık olur. Hash fonksiyonlarının bu özelliğini, şu şekilde gerekçelendirmişler;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This isn't necessarily bad!  To the contrary, in a table of size 2**i, taking
the low-order i bits as the initial table index is extremely fast, and there
are no collisions at all for dicts indexed by a contiguous range of ints.
The same is approximately true when keys are "consecutive" strings.  So this
gives better-than-random behavior in common cases, and that's very desirable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Açıklamayı kısaca özetlemek gerekirse; ardışık sayı veya metinlerin sözlük
indeksi olarak kullanılması yaygın olduğundan, ardışık hash değerlerinde
herhangi bir çakışma olması söz konusu değildir. Neticede, yaygın kullanımlar
için, rastgeleden-iyi performans sergileriz.&lt;/p&gt;
&lt;p&gt;Hash değerlerini tablo indekslerine çevirme konusu ise, bit maskeleme
yöntemi ile yapılıyor. Bunun için, tablo kapasitesi her zaman 2'nin
kuvveti şeklinde tutuluyor. Maske olarak kullanılan değer ise, tablo
kapasitesinin bir eksiği oluyor. Örneğin, tablo kapasitesi 8 olduğunda,
maske değeri 7 ( binary olarak 00000111 ) oluyor. İndeks ise, &lt;code&gt;hash&amp;amp;mask&lt;/code&gt;
şeklinde hesaplanıyor. Diğer bir deyişle, &lt;code&gt;2**i&lt;/code&gt; büyüklüğünde bir tablo için,
hash değerinin alttan &lt;code&gt;i&lt;/code&gt; biti tablo indeksi oluyor.&lt;/p&gt;
&lt;p&gt;Genel olarak hash tablolarında, çakışma çözümlemek için iki yöntem vardır. Bunlardan biri,
hash tablosunun her bir slotunda, linked list (tr. bağlı liste) veri yapısı
bulundurmakır (en. seperate chaining). Bu yöntemde, aynı hash değerini
taşıyan elemanlar, bir liste içinde tutulur. Diğer bir yöntem ise, eğer
birden fazla eleman aynı hash değerine sahipse, eleman hash
tablosunda farklı boş bir yerde tutulur (en. open addressing). Python sözlükleri,
bu ikinci bahsettiğim metodu tercih ediyor. Bunun gerekçesi ise, liste
yöntemini performans açısından maliyetli bulmaları.&lt;/p&gt;
&lt;p&gt;Hash tablosunda boş yer bulmak için de kullanılabilecek çeşitli yöntemler var.
Örneğin, İlk bulunan indeksten itibaren sırayla tablo taranabilir, veya ikinci bir
hash fonksiyonu kullanılabilir. Python sözlükleri biraz daha kendine özgü
bir yöntem kullanıyor. Bu yöntemin çekirdeğini oluşturan formül şu şekilde;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;j = ((5*j) + 1) mod 2**i
&lt;/pre&gt;


&lt;p&gt;Örneğin, kapasitesi 8 olan bir tabloda, çakışan indeks 5 olsun. Bu durumda,
boş yer arama sırası aşağıdaki gibi oluyor;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;5 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 0 -&amp;gt; 1 -&amp;gt; 6 -&amp;gt; 7 -&amp;gt; 4 -&amp;gt; 5 (burada tekrar başa sarıyor)
&lt;/pre&gt;


&lt;p&gt;Bu formülün özelliği, kendini tekrar etmeden önce tablodaki bütün slotları geziyor olması.
Bununla ilgili detaylı bilgi için, &lt;a href="https://www.google.com.tr/search?q=Linear+Congruential+Method"&gt;Linear Congruential Method&lt;/a&gt;
Google aramasına bakabilirsiniz. &lt;a href="https://www.google.com.tr/search?q=do%C4%9Frusal+sondalama"&gt;Doğrusal Sondalama&lt;/a&gt;
yerine bu yöntemin seçilmesinin önemli nedenlerinden biri, Python hash değerlerinin
ardışık olmaya meyilli olması. Rastgele misali bir sırada ilerlenmesi halinde, hızlı
bir şekilde boş yer bulunması ihtimali yükseliyor. Python, tabloda boş yer ararken
bu yöntemin yanında başka şeyler de kullanıyor. Tam algoritma şu şekilde;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;perturb&lt;/code&gt; değişkenini &lt;code&gt;hash&lt;/code&gt; olarak ata. (Buradaki &lt;code&gt;hash&lt;/code&gt; maskelenmeden önceki hali)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j = ((5*j) + perturb + 1) mod 2**i&lt;/code&gt; olsun.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perturb&lt;/code&gt; değikenini PERTURB_SHIFT sabiti kadar (optimum değeri 5 olarak belirlenmiş) sağa kaydır. (&lt;code&gt;perturb &amp;gt;&amp;gt;= PERTURB_SHIFT&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Buradaki &lt;code&gt;perturb&lt;/code&gt; değişkeninin amacı, orjinal hash değerinin üst bitlerini de hesaba katmak.
Böylece, orjinal &lt;code&gt;j = ((5*j) + 1) mod 2**i&lt;/code&gt; dizisinin doğrusal sondalama (en. linear probing)
yöntemine dönüşmesinin önüne geçiliyor. Örneğin, kapasitesi 8 olan bir tabloya, sırasıyla
hash değerleri 16, 32 ve 64 olan elemanlar ekleneceğini düşünelim. Bu durumda, hepsinin
alt 3 biti 0 olacağından, &lt;code&gt;j = ((5*j) + 1) mod 2**i&lt;/code&gt; formülüne göre aynı sırada
boş yer aranacak. Ancak, üst bitler de hesaba dahil edilirse, daha erken boş yer bulma
ihtimalimiz oluşuyor. Eğer döngü yeterince uzun çalışırsa, &lt;code&gt;perturb&lt;/code&gt; değeri sıfırda sabitleneceği için,
döngü tekrar &lt;code&gt;j = ((5*j) + 1) mod 2**i&lt;/code&gt; haline dönüşüyor. Böylece, tablodaki tüm slotların taranacağı
garanti altına alınmış oluyor.&lt;/p&gt;
&lt;p&gt;Peki, ya boş yer kalmamışsa? Boş yer arama sırasında, böyle bir endişe gereksiz, çünkü, tablo
kapasitesi 2/3'e ulaştığında, Python tablonun kapasitesini yükseltiyor. Böylece, tabloda boş
yer olmaması ihtimali ortadan kalkıyor. Tablonun kapasitesini yükseltmek için, geçerli kapasitenin
dört katı (tablo büyükse iki katı) büyüklüğünde hafıza ayrılıp, eski tablodaki bütün girdiler yeni tabloya taşınıyor. Bunun
sıradan bir &lt;code&gt;realloc&lt;/code&gt; veya &lt;code&gt;memcpy&lt;/code&gt; işlemi olmadığına dikkat edin. Tüm elemanların yeni tablodaki
yerleri &lt;code&gt;hash&amp;amp;mask&lt;/code&gt; yöntemiyle hesaplanıp, hash çakışmaları yukarıdaki bahsi geçen yöntemle gideriliyor.&lt;/p&gt;
&lt;p&gt;Tabloya yeni anahtar eklemek ve eklenmiş değerleri bulmak için yukarıda bahsedilen yöntem kullanıyor, ancak,
aramanın sona erdirilmesi kriteri farklı. Tabloya yeni anahtar eklenmek isteniyor ise, yazının başında
bahsedilen, kullanılmamış veya dummy slot bulununcaya kadar arama devam ediyor. Bulunan slot, aktif slot
haline getiriliyor ve eğer gerekli görülürse tablo kapasitesi artırılıyor. Eğer, verilen bir anahtarın
tabloda karşılığı aranıyorsa, önce anahtarın hash değeri bulunuyor. Sonra, yukarıdaki arama yöntemiyle,
hash değeri eşleşen bir slot veya kullanılmamış bir slot bulunana kadar arama sürdürülüyor. Eğer arama
sırasında bir dummy slot bulunursa, bu slot dikkate alınmadan arama sürdürülüyor. dummy slotun amacı,
silinen slotların aramayı erken sonlandırılmasını önlemek. Tablodan
herhangi bir slot silineceği zaman ise, &lt;code&gt;ma_key = dummy&lt;/code&gt;, &lt;code&gt;ma_value = NULL&lt;/code&gt; olarak atanıyor.&lt;/p&gt;
&lt;p&gt;Peki ya tabloya milyonlarca değer ekleyip, sonra geri silerseniz ne olur? Python tablo boyutu ayarlamasını
sadece yeni anahtar eklendikten sonra yaptığı için, sözlüğünüzün hafızada tuttuğu yer azalmaz. Ancak, anahtarları
sildikten sonra, yeni bir anahtar eklemeye kalktığınızda, Python sözlük kapasitesini düşürmeye karar verecektir.&lt;/p&gt;
&lt;p&gt;Daha detaylı bilgi almak için, orjinal &lt;a href="https://github.com/python/cpython/blob/2.7/Objects/dictobject.c"&gt;dictobject.c&lt;/a&gt;
ve &lt;a href="https://github.com/python/cpython/blob/2.7/Include/dictobject.h"&gt;dictobject.h&lt;/a&gt; dosyaları incelenebilir. Python'un
iç işleyişine dair kodlar göz korkutucu olsa da, yorumlardaki açıklamalar oldukça faydalı. Ayrıca, 2015 yılında
Python sözlüklerinden esinlenerek, anahtar ve değerleri string olabilen bir benzer bir veri yapısı yazmıştım. Temel
fikirleri anlatmak açısından faydalı olabileceği düşüncesi ile, &lt;a href="https://github.com/yasar11732/ylib/blob/master/src/dict.c"&gt;kodları GitHub'a yükledim.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Konuyu toplamak gerekirse, sözlük objeleri, Python'un en sık kullanılan veri yapılarından biri olduğu için, üzerine
ciddi kafa yorulmuş. Böyle ustaca tasarlanmış ve optimize edilmiş programları okumak, programlama öğrencileri için
faydalı olacaktır. Python kodlarının geri kalanı, her ne kadar sözlükler kadar iyi belgelendirilmemiş olsa da, github
deposundan ulaşılabiliyor. Biraz göz atılmasını tavsiye ederim.&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/sozluk-algoritmasi.html</guid><pubDate>Tue, 04 Sep 2018 17:12:00 GMT</pubDate></item><item><title>Python ile Hızlı Asal Sayı Tespiti</title><link>http://ysar.net/python/python-ile-hizli-asal-sayi-bulma.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Normalde bugün Euler Problemleri serisinde 12. yazıyı yazacaktım, ama kendimi asal sayı tespit programlarına biraz fazla kaptırdım. Euler
problemine geçmeden önce, son yazdığım asal sayı bulma fonksiyonunu paylaşayım istedim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/python-ile-hizli-asal-sayi-bulma.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/python/python-ile-hizli-asal-sayi-bulma.html</guid><pubDate>Tue, 21 Aug 2018 20:15:00 GMT</pubDate></item><item><title>Hangi Dilleri Öğrenmeliyim</title><link>http://ysar.net/python/programlama-dilleri.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Merhabalar,&lt;/p&gt;
&lt;p&gt;Uzun süredir blogumu güncelleyemiyordum, neredeyse iki yıl oldu. Bir arkadaşımın
sorduğu bir soruya verdiğim cevapla, uzun süren sessizliği bozmak istedim.&lt;/p&gt;
&lt;p&gt;Soru: Ben elektrik-elektronik mühendisliği öğrencisiyim. Yazılıma merakım çok. Yazılım konusunda kendimi geliştirmek istiyorum.Ancak, kafamda çok soru var.Sistem programlama,oyun programlama istiyorum.Orta seviyede c dilini biliyorum.Hangi dilleri öğrenmeliyim. Yardımcı olursanız sevinirim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/programlama-dilleri.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/programlama-dilleri.html</guid><pubDate>Sun, 15 May 2016 20:04:00 GMT</pubDate></item><item><title>Git ve Github'a başlangıç</title><link>http://ysar.net/python/git-ve-github.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Bir arkadaş mail yoluyla Git ve Github kullanımıyla ilgili bir yazı rica etti, hazır vaktim varken hazırlayayım istedim. Bu yazının hedef
kitlesi git ve github kullanmaya tamamen sıfırdan başlayacak kişiler olacak. Dolayısıyla, sadece en temel konulardan bahsedeceğim. Zaten kendim
de ileri seviye bir git kullanıcısı değilim. Ancak, günlük ihtiyaçlarımı idare edecek kadar git kullanabiliyorum. Yine de, git ve github
konusundaki deneyimlerimin, bu yazının ihtiyaçlarını karşılamak için yeterli olacağına inanıyorum. Başlamadan önce değinmek istediğim bir
diğer nokta da, özellikle github'la birlikte git nasıl kullanılır ona değineceğim. Hatta bazen, sadece github'a özgü özelliklere de değineceğim.
Dolayısıyla, eğer github kullanmak istemiyorsanız, bu yazının bazı bölümleri sizi ilgilendirmeyecektir, baştan belirteyim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/git-ve-github.html"&gt;Devamını oku…&lt;/a&gt; (8 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/git-ve-github.html</guid><pubDate>Tue, 22 Jul 2014 00:40:00 GMT</pubDate></item><item><title>Python Çalışma Rehberi</title><link>http://ysar.net/python/python-calisma-rehberi.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Bir konuyu öğrenmeye başlamanın kendine göre zorlukları vardır. Bunların en başında, çalışma planına karar verilmesi gelir. Özellikle,
internettin kaynak kaynadığı şu zamanlarda, asıl sıkıntı kaynak bulmakdan öte, hangi kaynakların hangi sırada kullanılması gerektiği
sorusudur. Eğer siz de benim gibi, bol bol internetten birşeyler öğrenmeye çalışan bir insansanız, muhtemelen bir öğretmenin eksikliğini
hissetmişsinizdir. Onca materyalin içerisinde size rehberlik edip yol gösterecek kimse yoktur ve belki de boğulduğunuzu hissedersiniz.
&lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/python-calisma-rehberi.html"&gt;Devamını oku…&lt;/a&gt; (6 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/python-calisma-rehberi.html</guid><pubDate>Mon, 21 Jul 2014 00:56:00 GMT</pubDate></item><item><title>L-System aracı güncellemeleri</title><link>http://ysar.net/python/l-system-tool-updates.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Geçen gün blog'da L-System çizmek için yazdığım bir programı tanıtmıştım. Bazı geliştirmeler yaptım, onlardan da bahsedeyim istedim.
Arayüzün şu anki görüntüsü şu şekilde (Büyük Hali İçin Tıklayınız)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ysar.net/images/myKGvC6.png"&gt; &lt;img alt="Screenshot" src="http://ysar.net/images/myKGvC6.png"&gt; &lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/l-system-tool-updates.html"&gt;Devamını oku…&lt;/a&gt; (1 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/l-system-tool-updates.html</guid><pubDate>Thu, 17 Jul 2014 19:11:00 GMT</pubDate></item><item><title>Python L-Sistemi Aracı</title><link>http://ysar.net/python/l-system-tool.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Merhabalar,&lt;/p&gt;
&lt;p&gt;Birkaç gün önce blog'dan &lt;a href="http://ysar.net/python/fractal.html"&gt;Python kullanarak Fraktal şekiller&lt;/a&gt; çizmek ile ilgili bir
yazı yazmıştım. O yazıyı yazdıktan sonra, turtle'ın bu tarz grafikleri çizmek için fazla yavaş
bir kütüphane olduğunun farkına vardım. Ayrıca, çok pratik de değildi.&lt;/p&gt;
&lt;p&gt;İnternette gördüğüm &lt;a href="http://www.kevs3d.co.uk/dev/lsystems/"&gt;l-sistem çizen&lt;/a&gt; websayfası çok hoşuma gitti,
bir benzerini Python ile yazmaya karar verdim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/l-system-tool.html"&gt;Devamını oku…&lt;/a&gt; (2 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/l-system-tool.html</guid><pubDate>Mon, 14 Jul 2014 05:33:00 GMT</pubDate></item><item><title>Python ile Fraktal Çizme</title><link>http://ysar.net/python/fractal.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Ne zamandır fraktal geometri meraklısı bir insanım. Python'da turtle kütüphanesini olduğunu farkedince (bunca zamandır nasıl görmediysem...) ilk iş
aklıma fraktal çizmek geldi. Blog'dan da paylaşayım istedim.
&lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/fractal.html"&gt;Devamını oku…&lt;/a&gt; (6 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/fractal.html</guid><pubDate>Sat, 12 Jul 2014 00:29:00 GMT</pubDate></item><item><title>Threading mi, yoksa multiprocessing mi kullanmalıyım</title><link>http://ysar.net/python/threading-vs-multiprocessing.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Merhaba,&lt;/p&gt;
&lt;p&gt;Uzun süredir blog atıl kalmıştı, kısa bir yazı yazayım istedim.&lt;/p&gt;
&lt;p&gt;Python'a yeni başlayan arkadaşlarda, threading ve multiprocessing konusu kafa karıştırıyor. Kafa karıştıran iki önemli husus var;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threading ve Multiprocessing mantığı nedir?&lt;/li&gt;
&lt;li&gt;Hangisi ne zaman tercih edilmelidir?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bununla birlikte, birkaç koldan çalışan işlemler arasında tesanüd nasıl sağlanır, onu da bilmek gerekiyor. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/threading-vs-multiprocessing.html"&gt;Devamını oku…&lt;/a&gt; (2 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/threading-vs-multiprocessing.html</guid><pubDate>Thu, 10 Jul 2014 00:22:00 GMT</pubDate></item><item><title>Python Metot Türleri</title><link>http://ysar.net/python/metot-turleri.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Python sınıflarında, temel olarak 3 farklı şekilde metot tanımı yapılabilir.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Örnek (Instance) metotları&lt;/li&gt;
&lt;li&gt;Statik (&lt;code&gt;@staticmethod&lt;/code&gt;) metotlar&lt;/li&gt;
&lt;li&gt;Sınıf (&lt;code&gt;@classmethod&lt;/code&gt;) metotları&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bunların arasındaki başlıca fark, aldıkları argümanlardır. Örnek metotlarına, ilk argüman olarak, objenin kendisine bir referans gönderilir. Bu argümana,
geleneksel olarak &lt;code&gt;self&lt;/code&gt; adı verilir. Statik metotlar, kendisini çağıran sınıf veya örnek hakkında herhangi bir bilgiye
sahip değildir. Bunlar, işlevini kaybetmeden, sınıf dışında da aynı şekilde tanımlanabilir. Sınıf metotları ise, otomatik
olarak, kendisini çağıran sınıfa veya örneğin sınıfına bir referans alır. Bu argümana da geleneksel olarak &lt;code&gt;cls&lt;/code&gt; adı verilir. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/python/metot-turleri.html"&gt;Devamını oku…&lt;/a&gt; (3 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/python/metot-turleri.html</guid><pubDate>Fri, 15 Nov 2013 16:17:06 GMT</pubDate></item></channel></rss>